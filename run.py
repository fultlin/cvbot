import asyncio
import sqlite3
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher()

conn = sqlite3.connect("analytics.db")
cursor = conn.cursor()

def update_progress_table():
    cursor.execute("PRAGMA table_info(progress)")
    columns = [column[1] for column in cursor.fetchall()]
    if "viewed" not in columns:
        cursor.execute("ALTER TABLE progress ADD COLUMN viewed BOOLEAN DEFAULT FALSE")
    if "confirmed" not in columns:
        cursor.execute("ALTER TABLE progress ADD COLUMN confirmed BOOLEAN DEFAULT FALSE")
    conn.commit()

update_progress_table()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS progress (
    user_id INTEGER,
    step TEXT,
    viewed BOOLEAN DEFAULT FALSE,
    confirmed BOOLEAN DEFAULT FALSE,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, step)
)
""")
conn.commit()

class CourseCallback(CallbackData, prefix="course"):
    action: str
    type: str

WELCOME_MESSAGE = "–¢–µ–±–µ –æ—á–µ–Ω—å –ø–æ–≤–µ–∑–ª–æ! –í—Å–µ–≥–æ –∑–∞ 3 —É—Ä–æ–∫–∞ —è –ø–æ—à–∞–≥–æ–≤–æ –ø–µ—Ä–µ–¥–∞–º —Ç–µ–±–µ —Å–≤–æ—é –∞–≤—Ç–æ—Ä—Å–∫—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å –ª—ë–≥–∫–æ—Å—Ç—å—é –æ—Å–≤–æ–∏—à—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. –ú–æ–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ 70% —Å–ª—É—á–∞–µ–≤ –∏ –µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ —É–∂–µ –±–æ–ª–µ–µ 300 —á–µ–ª–æ–≤–µ–∫. –û–Ω–∏ –æ—Ç–º–µ—á–∞—é—Ç, —á—Ç–æ —Ä–∞–Ω—å—à–µ –Ω–µ –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É, –Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–∏—Ö —Ç—Ä—ë—Ö —Ä–æ–ª–∏–∫–æ–≤, –æ–Ω–∏ –Ω–∞—É—á–∏–ª–∏—Å—å –≥—Ä–∞–º–æ—Ç–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏. –¢—ã –≥–æ—Ç–æ–≤ –∑–∞–±—Ä–∞—Ç—å –º–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–ê–ë–†–ê–¢–¨ ‚¨áÔ∏è"

LESSONS = {
    "lesson_1": {
        "text": "{name}, –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∫–æ—Ä–µ–µ –æ—Ç–∫—Ä—ã–≤–∞–π –µ–≥–æ –∏ —Å–º–æ—Ç—Ä–∏ –¥–æ –∫–æ–Ω—Ü–∞. –í —É—Ä–æ–∫–µ —è —Ä–∞–∑–æ–±—Ä–∞–ª: \n"
"   - –ö–∞–∫–æ–π 1 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ–±—ã —Ç–≤–æ—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å. \n"
"   - –ü–æ—á–µ–º—É 95% —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –æ—à–∏–±–∞—é—Ç—Å—è –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ. \n"
"   - –ö–∞–∫ –±—ã—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—ã–º –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∂–∏—Ç—å –∑–∞ —Å—á—ë—Ç —Ä—ã–Ω–∫–∞. \n"
"–ß–µ–º —Ä–∞–Ω—å—à–µ –ø–æ—Å–º–æ—Ç—Ä–∏—à—å —É—Ä–æ–∫, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—à—å –æ—à–∏–±–∞—Ç—å—Å—è –≤ –≤—ã–±–æ—Ä–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã, –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚§µÔ∏è",
        "url": "https://example.com/lesson1",
        "reminders": [
            "–í—Å–µ —É–∂–µ —Å–º–æ—Ç—Ä—è—Ç –≤—Ç–æ—Ä–æ–π —É—Ä–æ–∫, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! –ì–æ—Ç–æ–≤ –ø–æ—Å–ø–æ—Ä–∏—Ç—å, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ —Ç—ã —Å–æ–≤–µ—Ä—à–∞–µ—à—å –∏–º–µ–Ω–Ω–æ –ø–æ —Ç–µ–º –ø—Ä–∏—á–∏–Ω–∞–º, –æ –∫–æ—Ç–æ—Ä—ã—Ö —è –≥–æ–≤–æ—Ä—é –≤–æ –≤—Ç–æ—Ä–æ–º —É—Ä–æ–∫–µ. –£–¥–µ–ª–∏ –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç –∏ —Ç–≤–æ—è —Ç–æ—Ä–≥–æ–≤–ª—è –∏–∑–º–µ–Ω–∏—Ç—Å—è.",
            "–°–ø–æ–π–ª–µ—Ä, –æ –∫–æ—Ç–æ—Ä–æ–º —É–∑–Ω–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Ç—ã –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ —Ä–µ—à–∏–ª —Å–¥–∞—Ç—å—Å—è —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç —Ç–æ–ø–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏–∑ –º–æ–µ–π –∫–æ–º–∞–Ω–¥—ã. –¢—ã —Å–º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä—ã–Ω–∫—É, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–π–¥–µ—à—å –º–∏–Ω–∏ –∫—É—Ä—Å. –î–µ–π—Å—Ç–≤—É–π, –≤—Ç–æ—Ä–æ–≥–æ —à–∞–Ω—Å–∞ –Ω–µ –±—É–¥–µ—Ç"
        ],
        "next": "lesson_2"
    },
    "lesson_2": {
        "text": "{name}, –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –Ω–∞—É—á–∏–ª—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µ‚Ä¶\n"
"   - –ò —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è —Ç–≤–æ—è —Å–¥–µ–ª–∫–∞ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ –ø–ª—é—Å. \n"
"   - –¢—ã –±–æ–ª—å—à–µ –Ω–µ —Å–∏–¥–∏—à—å —á–∞—Å–∞–º–∏ —É –≥—Ä–∞—Ñ–∏–∫–æ–≤. \n"
"   - –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å –∏–¥–µ–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞. \n"
"   - –¶–µ–Ω–∞ –∏–¥—ë—Ç –≤—Å–µ–≥–¥–∞ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É, –≤ –∫–æ—Ç–æ—Ä—É—é –∑–∞—Ö–æ—á–µ—à—å. \n"
"‚Ä¶–Ω–æ, —É–≤—ã, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –º—ã –∑–¥–µ—Å—å –Ω–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è. –î–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ –Ω–µ –Ω—É–∂–Ω–æ –≥–∞–¥–∞—Ç—å, –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–º–µ—é—â–∏–º–∏—Å—è —Ñ–∞–∫—Ç–∞–º–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ. "
"–ò —Ç–µ–±–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω—ã –≤—Å–µ–≥–æ 3 —à–∞–≥–∞. "
"–ö–∞–∫–∏–µ? –°–º–æ—Ç—Ä–∏ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–∫, —Ç–∞–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã ‚§µÔ∏è ",
        "url": "https://example.com/lesson2",
        "reminders": [
            "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, —Å–º–æ—Ç—Ä–∏ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–∫! –ö–Ω–æ–ø–∫–∞ \"–°–ú–û–¢–†–ï–¢–¨\"",
        ],
        "next": "lesson_3"
    },
    
    "lesson_3": {
        "text": "{name}, –º–æ–ª–æ–¥–µ—Ü, —Ç—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!\n"
"–í —Ç—Ä–µ—Ç—å–µ–º —É—Ä–æ–∫–µ —è –æ–±—ä—è—Å–Ω—é —Ç–µ–±–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫–µ. \n"
"–ò –∑–Ω–∞–µ—à—å, —Å—Ä–µ–¥–∏ 300 —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏ –º–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –≤—Å–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–º–µ–Ω–Ω–æ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞. \n"
"–£–≤–µ—Ä–µ–Ω, —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è. –Ø –≥–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ–±—è –∑–∞ —Ä—É–∫—É –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. \n"
"–ü–æ—Å–º–æ—Ç—Ä–∏ —Ç—Ä–µ—Ç—å–µ –≤–∏–¥–µ–æ –∏ –Ω–µ –∑–∞–±—É–¥—å –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫. \n",
        "url": "https://example.com/lesson3",
        "reminders": [
            "–ü—Ä–∏–≤–µ—Ç, —Ç—ã —Ç—É—Ç? –≠—Ç–æ –°–∞—à–∞\n"
            "–†–µ—à–∏–ª –ª–∏—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ —Ç—Ä–µ—Ç–∏–π —É—Ä–æ–∫.\n"
            "–ó–Ω–∞—é, —É —Ç–µ–±—è –±—ã–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ, –Ω–∞–π–¥–µ—à—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã. –ï—Å–ª–∏ —á—Ç–æ, –ø–∏—à–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, —è –Ω–∞ —Å–≤—è–∑–∏.\n"
        ],
        "next": "final"
    },
    
    "final" : {
        "text": "{name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –º–∏–Ω–∏-–∫—É—Ä—Å–∞! –¢—ã –º–æ–ª–æ–¥–µ—Ü ü§ùüèΩ\n"
"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ –º–æ–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. \n"
"–ò —è —Ç–µ–±–µ –¥–∞—Ä—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π üéÅ –ø–æ–¥–∞—Ä–æ–∫: \n"
"–ö–∞—Ä—Ç—É —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø–ª–∞–Ω–æ–º –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤–∏–¥–µ–ª –≤ –º–∏–Ω–∏ –∫—É—Ä—Å–µ. –†–∞–Ω–µ–µ –µ–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—ã–ª–∞ 100$, —Å–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –µ–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. \n"
"–¢–∞–∫–∂–µ, —Ç–æ–ª—å–∫–æ –≤ —Å–ª–µ–¥—É—é—â–∏–µ 48 —á–∞—Å–æ–≤ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å —Ç–æ–ø–æ–≤—ã–º —Ç—Ä–µ–π–¥–µ—Ä–æ–º –∏–∑ –º–æ–µ–π –∫–æ–º–∞–Ω–¥—ã. \n"
"–ù–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–≤–æ—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å). \n"
"–†–∞–Ω—å—à–µ —ç—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –º—ã –ø—Ä–æ–≤–æ–¥–∏–ª–∏ –∑–∞ 500$, –Ω–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ —Å –º–∏–Ω–∏ –∫—É—Ä—Å–∞ –º—ã —Ä–µ—à–∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. \n"
"–ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É @ —Å–ª–æ–≤–æ ¬´—Ö–æ—á—É¬ª –∏ –æ–Ω –≤—ã—à–ª–µ—Ç —Ç–µ–±–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. \n"
"–ê–∫–∫–∞—É–Ω—Ç —Ç–≤–æ–µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ -> @\n"
"–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –ø–æ–ª—å–∑–æ–π.",
    }
}

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    cursor.execute("""
    INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
    VALUES (?, ?, ?, ?)
    """, (user_id, username, first_name, last_name))
    conn.commit()

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–±—Ä–∞—Ç—å ‚¨áÔ∏è", callback_data=CourseCallback(action="lesson_1", type="view").pack())]
    ])
    await message.answer(WELCOME_MESSAGE, reply_markup=markup)
    
@dp.callback_query(CourseCallback.filter())
async def callback_query_handler(call: CallbackQuery, callback_data: CourseCallback):
    user_id = call.from_user.id
    action = callback_data.action
    type_ = callback_data.type

    cursor.execute("SELECT first_name FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    name = result[0] if result else "–ò–º—è"

    if type_ == "view":
        cursor.execute("""
        INSERT OR IGNORE INTO progress (user_id, step, viewed)
        VALUES (?, ?, ?)
        """, (user_id, action, True))
        conn.commit()

        if action in LESSONS:
            lesson = LESSONS[action]
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", url=lesson["url"])],
                [InlineKeyboardButton(text="–Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª", callback_data=CourseCallback(action=action, type="confirm").pack())]
            ])
            await call.message.answer(lesson["text"].format(name=name), reply_markup=markup)

            
            asyncio.create_task(send_reminder(user_id, action, lesson["reminders"][0], delay=5))
            asyncio.create_task(send_reminder(user_id, action, lesson["reminders"][1], delay=30))

    elif type_ == "confirm":
        cursor.execute("""
        UPDATE progress
        SET confirmed = TRUE
        WHERE user_id = ? AND step = ?
        """, (user_id, action))
        conn.commit()
        await call.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä!", show_alert=True)

        if action == "lesson_3":
            final_lesson = LESSONS["final"]
            await call.message.answer(final_lesson['text'].format(name=name))
        else:
            next_lesson = LESSONS[action].get("next")
            if next_lesson and next_lesson in LESSONS:
                lesson = LESSONS[next_lesson]
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", url=lesson["url"])],
                    [InlineKeyboardButton(text="–Ø –ø–æ—Å–º–æ—Ç—Ä–µ–ª", callback_data=CourseCallback(action=next_lesson, type="confirm").pack())]
                ])
                await call.message.answer(lesson['text'].format(name=name), reply_markup=markup)


async def send_reminder(user_id: int, step: str, reminder_text: str, delay: int):
    await asyncio.sleep(delay * 60) 
    cursor.execute("""
    SELECT confirmed FROM progress WHERE user_id = ? AND step = ?
    """, (user_id, step))
    result = cursor.fetchone()

    if result and not result[0]:  
        await bot.send_message(user_id, reminder_text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

